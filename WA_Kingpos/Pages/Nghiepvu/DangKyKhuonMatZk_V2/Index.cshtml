@page
@model WA_Kingpos.Pages.DangKyKhuonMatZk_V2.IndexModel
@{
    ViewData["Title"] = "Danh sách khách hàng đăng ký khuôn mặt";
    ViewData["Name"] = "dangkykhuonmatzk_v2";
}


@section Styles {
    <link rel="stylesheet" href="/lib/sweetalert2/sweetalert2.min.css">
}

<div class="row">
    <div class="col-12">
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">@ViewData["Title"]</h3>
            </div>
            <!-- /.card-header -->
            <div class="card-body">
                @if (TempData["AlertMessage"] != null)
                {
                    <div id="AlertBox" class="alert @TempData["AlertType"] hide" role="alert">
                        @TempData["AlertMessage"]
                    </div>
                }
                <form method="post" id="form1">
                    <table id="tablefull" class="table table-bordered table-striped table-sm">
                        <thead>
                            <tr>
                                <th>Mã khách hàng</th>
                                <th>Tên khách hàng</th>
                                <th>Ngày sinh</th>
                                <th>Giới tính</th>
                                <th>Địa chỉ</th>
                                <th>Điện thoại</th>
                                <th>CCCD</th>
                                <th>Quốc tịch</th>
                                <th>Email</th>
                                <th>Ngày tạo</th>
                                <th>Nhân viên tạo</th>
                                <th>Thao tác</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.listitem)
                            {
                                <tr>
                                    <td>@item.MA_KH</td>
                                    <td>@item.TEN</td>
                                    <td>@item.NGAYSINH</td>
                                    <td>@item.GIOITINH</td>
                                    <td>@item.DIACHI</td>
                                    <td>@item.DIENTHOAI</td>
                                    <td>@item.CCCD</td>
                                    <td>@item.QUOCTICH</td>
                                    <td>@item.EMAIL</td>
                                    <td>@item.NGAYTAO.ToString("dd/MM/yyyy HH:mm")</td>
                                    <td>@item.TENNHANVIEN</td>
                                    <td>
                                        @* <a class="btn btn-info btn-sm" role="button" asp-page="./View" asp-route-id="@item.MA_KH">Xem</a> *@
                                        @* <button type="button" class="btn btn-info btn-sm btn-view" data-url="@Url.Page("_KS_KhachHang", new { id = item.MA_KH })">Xem</button> *@ @* data-toggle="modal" data-target="#myModal" *@
                                        <a asp-page="./_KS_KhachHang"
                                           asp-route-id="@item.MA_KH"
                                           asp-route-mode="view"
                                           class="btn btn-info btn-sm btn-open-modal">
                                            Xem
                                        </a>
                                        <a asp-page="./_KS_KhachHang"
                                           asp-route-id="@item.MA_KH"
                                           asp-route-mode="edit"
                                           class="btn btn-warning btn-sm btn-open-modal">
                                            Sửa
                                        </a>
                                        @if (Model.bXoa)
                                        {
                                            <a class="btn btn-danger btn-sm" role="button" asp-page="./Delete" asp-route-id="@item.MA_KH">Xóa</a>
                                        }
                                        <a class="btn btn-warning btn-sm" role="button" asp-page="./Config" asp-route-id="@item.MA_KH">Cấu hình</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </form>
            </div>
            <!-- /.card-body -->
            <div class="card-footer">
                @if (Model.bThem)
                {
                    <a class="btn btn-primary btn-open-modal" role="button" asp-page="./_KS_KhachHang" asp-route-mode="create">Thêm mới</a>
                }
            </div>


            <!-- Bootstrap modal -->
            <div class="modal fade" id="customerModal" tabindex="-1" role="dialog">
                <div class="modal-dialog modal-lg modal-dialog-scrollable" " role="document">
                    <div class="modal-content">
                        <div class="modal-header py-2">
                            <h5 class="modal-title" id="modalTitle">Thông tin khách hàng</h5>
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                        </div>
                        <div class="modal-body"><!-- Will load via AJAX --></div>
                        <div class="modal-footer py-2">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
                            <button type="button" class="btn btn-primary d-none" id="btnSave">Lưu</button>
                        </div>
                    </div>
                </div>
            </div>


            <!-- Camera Modal -->
            <div class="modal fade" id="cameraModal" tabindex="-1" role="dialog" aria-hidden="true">
                <div class="modal-dialog modal-lg" role="document">
                    <div class="modal-content">
                        <div class="modal-header py-2">
                            <h5 class="modal-title">Chụp ảnh</h5>
                            <button type="button" class="close" aria-label="Đóng" id="btnCloseCamera" onclick="closeCameraModalClick()">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>

                        <div class="modal-body text-center">
                            <video id="cameraVideo" autoplay playsinline style="max-width:100%; border:1px solid #ccc;"></video>
                            <canvas id="cameraCanvas" width="300" height="300" style="display:none;"></canvas>
                        </div>

                        <div class="modal-footer py-2 d-flex justify-content-center">
                            <button type="button" class="btn btn-outline-danger btn-md align-self-center" id="btnCancelCamera" onclick="closeCameraModalClick()">
                                Hủy
                            </button>

                            <button type="button" class=" btn btn-outline-info btn-lg rounded-circle" id="btnTakePhoto" onclick="takePhotoClick()">
                                <i class="fa fa-camera"></i>
                            </button>

                            <button type="button" class="btn btn-outline-secondary btn-md align-self-center" id="btnSwitchCamera" onclick="switchCameraClick()">
                                Xoay
                            </button>

                            <button type="button" class="btn btn-outline-secondary d-none" id="btnRetake" onclick="reTakePhotoClick()">Chụp lại</button>
                            <button type="button" class="btn btn-success d-none" id="btnUsePhoto" onclick="usePhotoClick()">Dùng ảnh này</button>
                        </div>
                    </div>
                </div>
            </div>


            <!-- /.card-footer -->
        </div>
        <!-- /.card -->
    </div>
    <!-- /.col -->
</div>
<!-- /.row -->

@section Scripts {
    <script src="/lib/face-api/face-api.min.js"></script>
    <script src="/lib/sweetalert2/sweetalert2.all.min.js"></script>
    <script>
        $(document).ready(async function () {
            await loadFaceApi();
        })

        var stream;
        let currentFacing = 'environment';
        let hiddenBase64;
        const video = document.getElementById('cameraVideo');
        const canvas = document.getElementById('cameraCanvas');
        const previewImg = document.getElementById('photoPreview');
        const btnUsePhoto = document.getElementById('btnUsePhoto');
        const btnRetake     = document.getElementById('btnRetake');
        const btnTakePhoto  = document.getElementById('btnTakePhoto');
        const btnSwitchCamera = document.getElementById('btnSwitchCamera');

        $(document).on('click', '.btn-open-modal', function (e) {
            e.preventDefault();
            var url = this.href; // reliable
            var $modal = $('#customerModal');
            var $body  = $modal.find('.modal-body');
            var $title = $modal.find('#modalTitle');
            var $save  = $('#btnSave');

            $modal.find('.modal-body').html('<div class="spinner-border" style="width: 3rem; height: 3rem;" role="status"><span class="sr-only">Loading...</span></div>');
            $modal.modal('show');

            $modal.find('.modal-body').load(url, function (response, status) {
                if (status === 'error') {
                    $(this).html('<div class="text-danger p-3">Không tải được thông tin.</div>');
                }

                 // Read meta flags from loaded fragment
                var meta = $body.find('[data-modal-title],[data-can-save]');
                var title = meta.data('modal-title') || 'Thông tin';
                var canSave = String(meta.data('can-save')).toUpperCase() === 'TRUE';

                $title.text(title);
                $save.toggleClass('d-none', !canSave);
            });
        });

        $('#btnSave').on('click', function () {
            var $modal = $('#customerModal');
            var $form = $modal.find('#customerForm');
            if ($form.length === 0) return;

            $.ajax({
                url: $form.attr('action') || window.location.href + '?handler=Save',
                method: 'POST',
                data: $form.serialize(),
                success: function (json) {
                    if (json && json.ok) {
                        $modal.modal('hide');
                        // Optional: reload the list or update row inline
                        location.reload();
                    } else {
                        // If server returned HTML (validation errors), replace body
                        $modal.find('.modal-body').html(json);
                    }
                },
                error: function (xhr) {
                    // If validation failed and Page() returned HTML, xhr.responseText is HTML
                    var ct = xhr.getResponseHeader('Content-Type') || '';
                    if (ct.indexOf('text/html') >= 0) {
                        $modal.find('.modal-body').html(xhr.responseText);
                    } else {
                        alert('Lỗi khi lưu.');
                    }
                }
            });
            
        });

        //-------------------- Xử lý ảnh
        function resizeImageTo300x300(file, callback) {
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = new Image();
                img.onload = function () {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    const size = 300;

                    canvas.width = size;
                    canvas.height = size;

                    // Fill with white background (optional, for JPG)
                    ctx.fillStyle = "#ffffff";
                    ctx.fillRect(0, 0, size, size);

                    // Draw image scaled to fill 300x300
                    ctx.drawImage(img, 0, 0, size, size);

                    const resizedDataUrl = canvas.toDataURL('image/jpeg', 0.9);
                    callback(resizedDataUrl);
                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        }

        // Nén hình ảnh cho đến khi kích thước nhỏ hơn 30 kilobytes
        function compressCanvasImage(canvas) {
            let quality = 1.0;
            let dataURL;
            let imageSize;
            const maxSizeKB = 30;
            let base64String;

            do {
                dataURL = canvas.toDataURL('image/jpeg', quality);
                // Extract the base64 part of the data URL
                base64String = dataURL.split(',')[1];
                // Calculate the image size in bytes
                const stringLength = base64String.length;
                const sizeInBytes = 4 * Math.ceil(stringLength / 3) * 0.5624896334383812; // Rough approximation
                imageSize = sizeInBytes / 1024; // Convert bytes to kilobytes

                if (imageSize > maxSizeKB) {
                    quality -= 0.05;
                }
            } while (imageSize > maxSizeKB && quality > 0);
            console.log(`compress image percent: ${quality}, output size: ${imageSize}KB`);
            return base64String;
        }

        async function dectionFace(img) {
            var $photoReview = $('#photoReview');
            
            const detections = await faceapi.detectAllFaces(img, new faceapi.TinyFaceDetectorOptions());
            if (detections.length == 1) {

                const lastDetection = detections[detections.length - 1];
                const box = lastDetection.box;
                // kích thước hình nhỏ nhất cho phép
                const minSize = 300.0;
                // kích thước hình lớn nhất cho phép
                const maxSize = box.height * 2.5;

                // tính vị trí tâm khung hình
                const centerPos = {
                    x: box.x + box.width / 2,
                    // khung hình nhận diện khuôn mặt thường tính từ trán trở xuống,
                    // như vậy cần trừ lùi trục Y khoảng 15% chiều cao box,
                    // để cho hình khuôn mặt cân đối giữa tấm hình
                    y: box.y + box.height / 2 - box.height / 15
                };

                // kiểm tra kích thước tối đa từ vị trí tâm box ra 4 cạnh của video
                // Lúc này điểm (0,0) tính từ vị trí video
                const maxEdgeSize = Math.min(
                    // nửa cạnh trái
                    centerPos.x,
                    // nửa cạnh phải
                    displaySize.width - centerPos.x,
                    // nửa cạnh trên
                    centerPos.y,
                    // nửa cạnh dưới
                    displaySize.height - centerPos.y,
                    // nửa cạnh tối đa cho phép
                    maxSize / 2
                );
                const targetSize = maxEdgeSize * 2;
                console.log(`calc target image size: ${targetSize}`);
                if (targetSize < minSize) {
                    $photoReview.html('<div class="text-danger">HÌNH ẢNH QUÁ NHỎ VUI LÒNG THỬ LẠI</div>');
                    return;
                }

                // phóng to vùng nhận diện focus khuôn mặt, sẽ là hình vuông tỉ lệ 1:1
                const extendedBox = {
                    x: centerPos.x - maxEdgeSize,
                    y: centerPos.y - maxEdgeSize,
                    width: targetSize,
                    height: targetSize
                };

                // Vẽ tấm hình đúng kích thước chuẩn hình vuông từ video
                let originalCanvas = document.createElement('canvas');
                originalCanvas.width = extendedBox.width;
                originalCanvas.height = extendedBox.height;
                let originalContext = originalCanvas.getContext('2d');
                originalContext.drawImage(video, extendedBox.x, extendedBox.y, extendedBox.width, extendedBox.height,// source rectangle
                    // destination rectangle
                    0, 0, originalCanvas.width, originalCanvas.height
                );

                // vẽ tấm hình kích thước như video để hiển thị lên UI
                canvas.width = videoRect.width;
                canvas.height = videoRect.height;
                let context = canvas.getContext('2d');
                context.drawImage(originalCanvas, 0, 0, originalCanvas.width, originalCanvas.height,// source rectangle
                    // destination rectangle
                    0, 0, canvas.width, canvas.height
                );

                // Vẽ tấm hình kích thước cố định 300 x 300 để gửi cho máy chấm công
                let canvas300 = document.createElement('canvas');
                canvas300.width = 300;
                canvas300.height = 300;
                let context300 = canvas300.getContext('2d');
                context300.drawImage(originalCanvas, 0, 0, originalCanvas.width, originalCanvas.height,// source rectangle
                    // destination rectangle
                    0, 0, canvas300.width, canvas300.height
                );

                let base64String = compressCanvasImage(canvas300);

                document.getElementById('photoBase64').value = base64String;
            }
            else if (detections.length <= 0) {
                $photoReview.html('<div class="text-danger">KHÔNG PHÁT HIỆN KHUÔN MẶT TRONG ẢNH</div>');
            }
            else {
                $photoReview.html('<div class="text-danger">PHÁT HIỆN NHIỀU HƠN 1 KHUÔN MẶT TRONG ẢNH</div>');
            }
        }

        function createImageReview(src) {
            var newPhoto = document.createElement('img');
            newPhoto.alt = "Customer photo";
            newPhoto.className = "img-thumbnail";
            newPhoto.style = "max-width:250px; max-height:250px; min-width:150px; min-height:150px";
            newPhoto.src = src;
            newPhoto.onload = () => dectionFace(newPhoto);

            var $photoReview = $('#photoReview');
            $photoReview.html('');
            $photoReview.append(newPhoto);
        }

        function handleImageInput(input) {

            if (input.files && input.files[0]) {
                resizeImageTo300x300(input.files[0], (base64) => createImageReview(base64));
            }
        }

        function fileInputChange(element) {
            handleImageInput(element);
        }

        

        function stopStream() {
            if (stream) { stream.getTracks().forEach(t => t.stop()); stream = null; }
        }

        async function startCamera() {
          // Stop any existing stream before starting a new one
          stopStream();

          try {
            stream = await navigator.mediaDevices.getUserMedia({
              video: { facingMode: { exact: currentFacing } }
            });
          } catch {
            // Fallback: try without exact constraint if device doesn't support it
            stream = await navigator.mediaDevices.getUserMedia({
              video: { facingMode: currentFacing }
            });
          }
          video.srcObject = stream;
        }


        async function openCameraClick() {
            hiddenBase64 = document.getElementById('photoBase64');
            try {
                await startCamera();
                btnTakePhoto.classList.remove('d-none');
                btnSwitchCamera.classList.remove('d-none');
                btnUsePhoto.classList.add('d-none');
                btnRetake.classList.add('d-none');
                canvas.style.display = 'none';
                video.style.display = 'block';
                $('#customerModal').modal('hide');
                $('#cameraModal').modal('show');
            } catch (err) {
                alert('Không thể truy cập camera: ' + err.message);
            }
        }

        function takePhotoClick() {
            
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw video frame into canvas, resize to 300x300
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

            // Hide video, show canvas
            video.style.display = 'none';
            canvas.style.display = 'block';

            // Show "Use photo" button
            btnTakePhoto.classList.add('d-none');
            btnSwitchCamera.classList.add('d-none');
            btnRetake.classList.remove('d-none');
            btnUsePhoto.classList.remove('d-none');
        }

        function reTakePhotoClick() {
            video.style.display = 'block';
            canvas.style.display = 'none';

            btnTakePhoto.classList.remove('d-none');
            btnRetake.classList.add('d-none');
            btnUsePhoto.classList.add('d-none');
        }

        function usePhotoClick() {
            const dataUrl = canvas.toDataURL('image/jpeg', 0.9);
            $('#cameraModal').modal('hide');
            $('#customerModal').modal('show');
            createImageReview(dataUrl);
            stopStream();
        }

        async function switchCameraClick() {
            currentFacing = currentFacing === 'user' ? 'environment' : 'user';
            await startCamera();
        }


        function closeCameraModalClick() {
            $('#cameraModal').modal('hide');
        }

        async function loadFaceApi() {
            let modelDir = "/lib/face-api/models/";
            await Promise.all([
                faceapi.nets.tinyFaceDetector.loadFromUri(modelDir + 'tiny_face_detector_model-weights_manifest.json'),
            ]);
        }

        
    </script>
}
